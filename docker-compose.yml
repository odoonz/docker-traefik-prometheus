version: '3.8'

services:
  prometheus:
    image: prom/prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - inverseproxy_shared
    labels:
     - traefik.http.routers.prometheus.rule: "Host(`prometheus.staging.odoo.nz`)"
     - traefik.http.routers.prometheus.service: "prometheus"
     - traefik.http.services.prometheus.loadbalancer.server.port: "9090"
     - traefik.docker.network: "inverseproxy_shared"
     - traefik.http.routers.prometheus.tls: "true"
     - traefik.http.routers.prometheus.tls.certresolver: "letsencrypt"

  grafana:
    image: grafana/grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    networks:
      - inverseproxy_shared
    user: "104"
    labels:
      - traefik.http.routers.grafana.rule: "Host(`grafana.staging.odoo.nz`)"
      - traefik.http.routers.grafana.service: "grafana"
      - traefik.http.services.grafana.loadbalancer.server.port: "3000"
      - traefik.docker.network: "inverseproxy_shared"
      - traefik.http.routers.prometheus.tls: "true"
      - traefik.http.routers.prometheus.tls.certresolver: "letsencrypt"

networks:
  inverseproxy_shared:
    external: 1

volumes:
  prometheus_data: {}
  grafana_data: {}